name: CI

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
      - 'feature/*'
      - 'refs/tags/*'
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Install xmlstarlet
      run: sudo apt-get install -y xmlstarlet

    - name: Get version from csproj
      run: |
        VERSION=$(xmlstarlet sel -t -v "/Project/PropertyGroup/Version" Respify/Respify.csproj)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
      id: get_version

    - name: Restore dependencies
      run: dotnet restore Respify/Respify.csproj

    - name: Build
      run: dotnet build Respify/Respify.csproj --no-restore --configuration Release
      
    - name: Verify test DLL exists
      run: |
        if [ ! -f Respify.Tests/bin/Release/net8.0/Respify.Tests.dll ]; then
          echo "Test DLL not found."
          exit 1
        fi
        
    - name : list test output directory
      run: ls -la Respify.Tests/bin/Release/net8.0
      
    - name: Run tests
      run: dotnet test Respify.Tests/Respify.Tests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage"

    - name: Report to SonarQube
      uses: sonarsource/sonarcloud-github-action@v1
      with:
        args: >
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.sources=Respify
          -Dsonar.tests=Respify.Tests
          -Dsonar.cs.opencover.reportsPaths=Respify.Tests/TestResults/*/coverage.opencover.xml

    #- name: Publish to NuGet
      #if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      #run: dotnet nuget push 'Respify/bin/Release/*.nupkg' --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --version ${{ env.VERSION }}

  enforce-gitflow:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Enforce GitFlow
      run: |
        branch=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
        if [[ "$branch" =~ ^(main|develop|release\/.*)$ ]]; then
          echo "Branch $branch is allowed."
        else
          echo "Branch $branch is not allowed."
          exit 1
        fi
